---
export interface Book {
  id: number;
  title: string;
  author: string;
  image: string;
  link: string;
  votes: number;
  tags: string[];
}

// 在伺服器端獲取初始書籍數據
const API_BASE_URL =
  "https://reading.udn.com/story/act/bd_2024storyawards/API/";
const BOOKS_API_URL = `${API_BASE_URL}book.php`;

async function fetchInitialBooks() {
  try {
    const response = await fetch(BOOKS_API_URL);
    if (!response.ok) throw new Error(`HTTP 錯誤: ${response.status}`);

    const data = await response.json();
    if (data && data.success && data.data && data.data.books) {
      return data.data.books;
    }
    return [];
  } catch (error) {
    console.error("獲取初始書籍數據失敗:", error);
    return [];
  }
}

// 獲取初始書籍列表用於 SSR
const initialBooks = await fetchInitialBooks();
---

<header class="book-header" id="book-header">
  <img class="book-list" src="/image/list.webp" alt="" />
  <p class="book-mobile">每日投一票，點亮好作品</p>
  <div class="book-filter">
    <div class="book-filter__left">
      <div class="search-container">
        <svg
          class="search-icon"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
        >
          <path d="M0,0H24V24H0Z" fill="none"></path>
          <path
            id="path_1350"
            data-name="path 1350"
            d="M0,0H24V24H0Z"
            fill="none"></path>
          <path
            id="path_1351"
            data-name="path 1351"
            d="M15.5,14h-.79l-.28-.27a6.51,6.51,0,1,0-.7.7l.27.28v.79l5,4.99L20.49,19Zm-6,0A4.5,4.5,0,1,1,14,9.5,4.494,4.494,0,0,1,9.5,14Z"
            fill="#5f6368"></path>
        </svg>
        <input
          type="text"
          id="search-input"
          class="book-filter__search"
          placeholder="搜尋書名 / 作者名"
        />
      </div>
      <div class="book-filter__center">
        <h1 class="book-filter__title">每日投一票，點亮好作品</h1>
      </div>
      <div class="book-filter__right">
        <div class="book-filter__tag dropdown-wrapper">
          <div class="custom-dropdown">
            <div class="custom-dropdown__selected" id="tag-dropdown-selected">
              - 標籤 -
            </div>
            <div class="custom-dropdown__options" id="tag-dropdown-options">
              <div class="custom-dropdown__option selected" data-value="">
                - 標籤 -
              </div>
              <!-- 標籤選項將由 JavaScript 動態添加 -->
            </div>
          </div>
        </div>
        <div class="book-filter__sort dropdown-wrapper">
          <div class="custom-dropdown">
            <div class="custom-dropdown__selected" id="sort-dropdown-selected">
              隨機排列
            </div>
            <div class="custom-dropdown__options" id="sort-dropdown-options">
              <div class="custom-dropdown__option selected" data-value="random">
                隨機排列
              </div>
              <div class="custom-dropdown__option" data-value="votes-desc">
                票數高到低
              </div>
              <div class="custom-dropdown__option" data-value="votes-asc">
                票數低到高
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <main class="book-main">
    <section id="book-list" class="book-grid">
      <div id="loading" class="book-grid__loading">載入中...</div>
      <!-- 使用伺服器端渲染的初始書籍列表 -->
      {
        initialBooks.map((book) => (
          <div class="book-card" data-id={book.id}>
            <div class="book-card__image">
              <a
                href={book.link}
                target="_blank"
                rel="noopener noreferrer"
                class="book-card__link"
              >
                <img src={book.image} alt={book.title} loading="lazy" />
              </a>
            </div>
            <div class="book-card__content">
              <a
                href={book.link}
                target="_blank"
                rel="noopener noreferrer"
                class="book-card__link"
              >
                <h3 class="book-card__title">{book.title}</h3>
              </a>
              <p
                class="book-card__author"
                style="display: flex; align-items: center; gap: 4px;"
              >
                <svg
                  id="person_24dp_5F6368"
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 16 16"
                >
                  <path
                    id="path_1350"
                    data-name="path 1350"
                    d="M0,0H16V16H0Z"
                    fill="none"
                  />
                  <path
                    id="path_1351"
                    data-name="path 1351"
                    d="M9.333,9.333A2.667,2.667,0,1,0,6.667,6.667,2.666,2.666,0,0,0,9.333,9.333Zm0,1.333C7.553,10.667,4,11.56,4,13.333V14a.669.669,0,0,0,.667.667H14A.669.669,0,0,0,14.667,14v-.667C14.667,11.56,11.113,10.667,9.333,10.667Z"
                    transform="translate(-1.333 -1.333)"
                    fill="#fff"
                  />
                </svg>
                {book.author}
              </p>
              <div class="book-card__tags">
                {book.tags.map((tag) => (
                  <span class="book-tag" data-tag={tag}>
                    #{tag}
                  </span>
                ))}
              </div>
              <div class="book-card__votes">
                <span class="book-card__votes-block">
                  <span class="book-card__votes-count">{book.votes}</span> 票
                </span>
                <button class="book-card__vote-btn" data-id={book.id}>
                  登入投票 »
                </button>
              </div>
            </div>
          </div>
        ))
      }
    </section>
  </main>
  <!-- 引入自定義 SweetAlert2 樣式 -->
  <style is:global>
    @import "../styles/sweetalert2.scss";
  </style>

  <script>
    import SwalHelper from "../js/sweetalert2Helper.js";
    import Swal from "sweetalert2";
    import DOMPurify from "dompurify";
    import "../js/memberAuth.js";

    // 將 Swal、DOMPurify、memberAuth 設置為全域變數
    window.Swal = Swal;
    window.DOMPurify = DOMPurify;
    // window.memberAuth 已在 memberAuth.js 內設為全域

    const API_BASE_URL =
  "https://reading.udn.com/story/act/bd_2024storyawards/API/";
    const BOOKS_API_URL = `${API_BASE_URL}book.php`;
    const VOTES_API_URL = `${API_BASE_URL}vote.php`;
    const UDN_LOGIN_URL = "https://member.udn.com/member/login.jsp";

    // 設定投票截止時間 - 2025年6月19日 10:00
    const VOTE_END_DATE = new Date("2025-06-19T10:00:00+08:00");
    
    // 檢查投票是否已截止
    function isVotingEnded() {
      const now = new Date();
      return now >= VOTE_END_DATE;
    }

    console.log("使用API基礎URL:", API_BASE_URL);
    console.log("投票截止時間:", VOTE_END_DATE.toLocaleString("zh-TW"));

    let books = [];
    let allTags = new Set();
    let allOriginalTags = new Set(); // 新增：存儲所有原始標籤
    let currentUser = window.memberAuth.getUser();

    const state = {
      currentTag: "",
      currentSort: "random",
      currentOrder: "desc",
    };

    const apiClient = {
      timeout: 10000,

      async fetch(url, options = {}) {
        const fetchPromise = fetch(url, options);
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => {
            reject(new Error("請求超時，請檢查網路連接"));
          }, this.timeout);
        });

        try {
          const response = await Promise.race([fetchPromise, timeoutPromise]);

          if (response.status === 401) {
            throw new Error("請先登入會員");
          }

          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(
              errorData.message || `HTTP 錯誤: ${response.status}`
            );
          }

          return await response.json();
        } catch (error) {
          console.error(`API 請求失敗: ${url}`, error);
          throw error;
        }
      },

      buildQueryParams(params = {}) {
        const queryParams = new URLSearchParams();

        for (const [key, value] of Object.entries(params)) {
          if (value !== undefined && value !== null && value !== "") {
            queryParams.append(key, value);
          }
        }

        const queryString = queryParams.toString();
        return queryString ? `?${queryString}` : "";
      },

      async getBooks(tag = "", sort = "votes-desc") {
        const params = {};

        // 確保空字串標籤不會被發送到後端
        if (tag && tag !== "") {
          params.tag = tag;
        }

        // 處理排序參數
        if (sort !== "random") {
          const [sortType, orderType] = sort.split("-");
          params.sort = sortType;
          params.order = orderType;
        }

        const url = BOOKS_API_URL + this.buildQueryParams(params);
        console.log("請求URL:", url, "參數:", params);

        try {
          const response = await this.fetch(url);
          if (response && response.success && response.data) {
            return response.data.books || [];
          } else {
            throw new Error(response.message || "獲取書籍資料失敗");
          }
        } catch (error) {
          console.error("獲取書籍資料失敗:", error);
          throw error;
        }
      },

      async voteForBook(bookId, userId) {
        if (!currentUser.isLoggedIn) {
          throw new Error("請先登入會員");
        }

        const url = VOTES_API_URL;
        const data = {
          action: "vote",
          vote_id: bookId.toString(),
          option: "default",
          user_id: userId,
        };

        console.log(`發送投票請求: ${url}`, data);

        try {
          const response = await this.fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-User-ID": userId,
            },
            body: JSON.stringify(data),
          });

          if (!response.success) {
            throw new Error(response.message || "投票失敗");
          }

          return response;
        } catch (error) {
          console.error(`投票請求失敗: ${url}`, error);
          throw error;
        }
      },

      async checkVoteStatus(bookId, userId) {
        if (!userId || !currentUser.isLoggedIn) {
          return {success: true, data: {has_voted: false}};
        }

        const url = VOTES_API_URL;
        const data = {
          action: "check_vote",
          vote_id: bookId.toString(),
          user_id: userId,
        };

        console.log(`檢查投票狀態: ${url}`, data);

        try {
          const response = await this.fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-User-ID": userId,
            },
            body: JSON.stringify(data),
          });

          if (!response.success) {
            throw new Error(response.message || "檢查投票狀態失敗");
          }

          return response;
        } catch (error) {
          console.error(`檢查投票狀態失敗: ${url}`, error);
          throw error;
        }
      },

      async batchCheckVoteStatus(userId) {
        const url = VOTES_API_URL;
        const data = {
          action: "batch_check_vote",
          user_id: userId,
        };

        console.log(`批量檢查投票狀態: ${url}`, data);

        try {
          const response = await this.fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-User-ID": userId,
            },
            body: JSON.stringify(data),
          });

          if (!response.success) {
            throw new Error(response.message || "批量檢查投票狀態失敗");
          }

          return response;
        } catch (error) {
          console.error(`批量檢查投票狀態失敗: ${url}`, error);
          throw error;
        }
      },
    };

    // 使用加強版的 DOMPurify 配置，以更好防禦 XSS 攻擊
    function setupEnhancedDOMPurify() {
      // 確保 DOMPurify 已載入
      if (typeof DOMPurify !== 'undefined') {
        // 設置 DOMPurify 配置為最嚴格模式
        DOMPurify.setConfig({
          ALLOWED_TAGS: ['a', 'img', 'h3', 'p', 'span', 'svg', 'path', 'div', 'button'],
          ALLOWED_ATTR: [
            'href', 'target', 'rel', 'class', 'id', 'src', 'alt', 'loading', 
            'style', 'data-id', 'data-tag', 'fill', 'xmlns', 'viewBox', 'width', 'height'
          ],
          ALLOW_DATA_ATTR: true,
          SAFE_FOR_TEMPLATES: true,
          RETURN_DOM: false,
          ADD_ATTR: ['target', 'rel']  // 確保 target="_blank" 與 rel="noopener noreferrer" 被保留
        });
        
        // 添加鉤子，確保所有連結都具有安全屬性
        DOMPurify.addHook('afterSanitizeAttributes', function(node) {
          if ('target' in node) {
            node.setAttribute('target', '_blank');
            node.setAttribute('rel', 'noopener noreferrer');
          }
        });
        
        console.log("已啟用增強型 DOMPurify 防護");
      } else {
        console.warn("DOMPurify 未載入，XSS 防護可能不完整");
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      // 初始化增強版 DOMPurify 配置以防 XSS
      setupEnhancedDOMPurify();
      
      window.memberAuth.checkLoginStatus().then(() => {
        currentUser = window.memberAuth.getUser();
        updateVoteButtonsState();
        validateVotedBooks();
      });

      // 初始化自定義下拉選單
      initCustomDropdowns();

      const searchInput = document.getElementById("search-input");
      if (searchInput) {
        // 添加輸入事件處理，使用防抖函數
        searchInput.addEventListener("input", debounce(searchBooks, 300));

        // 添加按下 Esc 鍵清空搜尋欄
        searchInput.addEventListener("keydown", (e) => {
          if (e.key === "Escape") {
            searchInput.value = "";
            // 觸發搜尋以恢復原始書籍列表
            searchBooks({target: searchInput});
          }
        });
      }

      // 確保所有書籍卡片連結在新分頁打開
      ensureLinksOpenInNewTab();

      // 設置 MutationObserver 觀察 DOM 變化
      setupLinkObserver();

      fetchBooks(null, "random");

      validateVotedBooks();
    });

    // 確保所有書籍卡片連結在新分頁打開的函數
    function ensureLinksOpenInNewTab() {
      // 選擇所有的書籍卡片連結
      const bookLinks = document.querySelectorAll(".book-card__link");

      // 為每個連結添加 target="_blank" 和 rel="noopener noreferrer" 屬性
      bookLinks.forEach((link) => {
        if (!link.getAttribute("target")) {
          link.setAttribute("target", "_blank");
        }
        if (
          !link.getAttribute("rel") ||
          !link.getAttribute("rel").includes("noopener")
        ) {
          link.setAttribute("rel", "noopener noreferrer");
        }
      });
    }

    // 觀察 DOM 變化，對新添加的連結進行處理
    function setupLinkObserver() {
      // 創建一個 MutationObserver 實例
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.addedNodes && mutation.addedNodes.length > 0) {
            // 檢查新添加的節點中是否有書籍卡片連結
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === 1) {
                // Element 節點
                // 檢查節點本身
                if (
                  node.classList &&
                  node.classList.contains("book-card__link")
                ) {
                  ensureLinkAttributes(node);
                }

                // 檢查節點內的子元素
                const links = node.querySelectorAll(".book-card__link");
                links.forEach((link) => ensureLinkAttributes(link));
              }
            });
          }
        });
      });

      // 配置觀察選項
      const config = {
        childList: true,
        subtree: true,
      };

      // 開始觀察 document.body
      observer.observe(document.body, config);
    }

    // 為單個連結設置屬性
    function ensureLinkAttributes(link) {
      if (!link.getAttribute("target")) {
        link.setAttribute("target", "_blank");
      }
      if (
        !link.getAttribute("rel") ||
        !link.getAttribute("rel").includes("noopener")
      ) {
        link.setAttribute("rel", "noopener noreferrer");
      }
    }

    // 初始化自定義下拉選單
    function initCustomDropdowns() {
      // 為每個自定義下拉選單添加事件監聽器
      const customDropdowns = document.querySelectorAll(".custom-dropdown");

      customDropdowns.forEach((dropdown) => {
        const selected = dropdown.querySelector(".custom-dropdown__selected");
        const options = dropdown.querySelector(".custom-dropdown__options");

        // 點擊下拉標題時顯示/隱藏選項
        selected.addEventListener("click", (e) => {
          e.stopPropagation();

          // 關閉其他所有下拉選單
          document
            .querySelectorAll(".custom-dropdown__options")
            .forEach((el) => {
              if (el !== options) {
                el.classList.remove("show");
              }
            });

          options.classList.toggle("show");
          dropdown.classList.toggle("active");
        });

        // 為每個選項添加點擊事件
        const optionElements = dropdown.querySelectorAll(
          ".custom-dropdown__option"
        );
        optionElements.forEach((option) => {
          option.addEventListener("click", (e) => {
            e.stopPropagation();

            // 更新選中項目的文本
            selected.textContent = option.textContent;

            // 更新選中狀態
            optionElements.forEach((opt) => opt.classList.remove("selected"));
            option.classList.add("selected");

            // 關閉下拉選單
            options.classList.remove("show");
            dropdown.classList.remove("active");

            // 處理選擇事件
            const value = option.dataset.value;

            if (dropdown.closest(".book-filter__tag")) {
              filterBooksByTagValue(value);
            } else if (dropdown.closest(".book-filter__sort")) {
              sortBooksByValue(value);
            }
          });
        });
      });

      // 點擊頁面其他地方時關閉所有下拉選單
      document.addEventListener("click", () => {
        document.querySelectorAll(".custom-dropdown__options").forEach((el) => {
          el.classList.remove("show");
        });
        document.querySelectorAll(".custom-dropdown").forEach((el) => {
          el.classList.remove("active");
        });
      });
    }

    // 根據標籤值過濾書籍
    function filterBooksByTagValue(tagValue) {
      console.log(`按標籤過濾: "${tagValue}"`);

      // 如果標籤值是空字串，表示「- 標籤 -」，將其設為 null
      const apiTagValue = tagValue === "" ? null : tagValue;

      // 更新狀態
      state.currentTag = tagValue;

      const currentSort = `${state.currentSort}-${state.currentOrder}`;
      console.log(
        `過濾標籤值: "${tagValue}", API 參數: ${apiTagValue}, 當前排序: ${currentSort}`
      );

      // 傳遞 null 而不是空字串給 fetchBooks
      fetchBooks(
        apiTagValue,
        currentSort === "random-desc" ? "random" : currentSort
      );
    }

    // 根據排序值排序書籍
    function sortBooksByValue(sortValue) {
      console.log(`按值排序: ${sortValue}`);
      fetchBooks(state.currentTag === "" ? null : state.currentTag, sortValue);
    }

    // 優化後的洗牌函數，確保使用加密安全的隨機數
    function shuffleArray(array) {
      // 檢查是否支援 crypto.getRandomValues API
      if (window.crypto && window.crypto.getRandomValues) {
        // 使用加密安全的隨機數進行洗牌
        const randomValues = new Uint32Array(array.length);
        window.crypto.getRandomValues(randomValues);

        const randomized = array.map((value, i) => ({
          value,
          sort: randomValues[i],
        }));

        randomized.sort((a, b) => a.sort - b.sort);

        for (let i = 0; i < array.length; i++) {
          array[i] = randomized[i].value;
        }
      } else {
        // 降級使用 Fisher-Yates 洗牌算法

        for (let i = array.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [array[i], array[j]] = [array[j], array[i]];
        }
      }

      return array;
    }

    async function fetchBooks(tag = null, sort = "random") {
      try {
        const loadingElement = document.getElementById("loading");
        if (loadingElement) loadingElement.style.display = "block";

        console.log(`請求書籍數據 - 原始標籤: "${tag}", 原始排序: ${sort}`);

        // 更新全局狀態 - null 標籤表示「- 標籤 -」
        state.currentTag = tag || "";

        if (sort === "random") {
          state.currentSort = "random";
          state.currentOrder = "desc";
        } else {
          const [sortType, order] = sort.split("-");
          state.currentSort = sortType;
          state.currentOrder = order;
        }

        // 構建 API 請求參數
        const params = {};

        // 只有當標籤不為 null 時才加入參數
        if (tag !== null && tag !== "") {
          params.tag = tag;
        }

        // 處理排序參數
        if (sort !== "random") {
          const [sortType, orderType] = sort.split("-");
          params.sort = sortType;
          params.order = orderType;
        }

        // 使用修改後的 params 構建 URL
        const url = BOOKS_API_URL + apiClient.buildQueryParams(params);
        console.log("API 請求 URL:", url, "參數:", params);

        // 直接使用 fetch 請求，而不是 apiClient.getBooks
        const response = await apiClient.fetch(url);
        if (response && response.success && response.data) {
          books = response.data.books || [];
        } else {
          throw new Error(response.message || "獲取書籍資料失敗");
        }

        window.allBooks = [...books];

        // 只在隨機排序時打亂順序
        if (sort === "random" && books.length > 0) {
          shuffleArray(books);
        }

        // 更新 UI
        collectTags();
        populateTagSelect();
        updateDropdownsState();
        renderBookList();

        // 日誌輸出獲取的書籍數量
        console.log(`成功獲取 ${books.length} 本書`);
      } catch (error) {
        handleFetchError(error);
      }
    }

    // 修改錯誤處理函數
    function handleFetchError(error) {
      console.error("獲取書籍資料失敗:", error);
      showError("無法載入書籍資料，請稍後再試。");

      const loadingElement = document.getElementById("loading");
      if (loadingElement) loadingElement.style.display = "none";

      const bookListElement = document.getElementById("book-list");
      if (bookListElement) {
        const errorDiv = document.createElement("div");
        errorDiv.className = "error-message";
        // 使用 textContent 而不是 innerHTML，避免 XSS
        errorDiv.textContent = `載入失敗：${error.message || "請檢查網路連接並重試"}`;
        bookListElement.innerHTML = '';
        bookListElement.appendChild(errorDiv);
      }
    }

    function showLoginModal(bookId) {
      SwalHelper.showLoginModal().then((result) => {
        if (result.isConfirmed) {
          SwalHelper.redirectToLogin(UDN_LOGIN_URL);
        }
      });
    }

    function searchBooks(event) {
      // 安全處理使用者輸入
      const searchTerm = DOMPurify.sanitize(event.target.value.trim()).toLowerCase();
      console.log(`執行搜尋: "${searchTerm}"`);

      if (!window.allBooks || window.allBooks.length === 0) {
        console.log("沒有原始書籍數據可供搜尋");
        return;
      }

      // 重置書籍列表
      if (searchTerm === "") {
        console.log("搜尋詞為空，恢復完整書籍列表");
        books = [...window.allBooks];
      } else {
        console.log(`根據關鍵詞 "${searchTerm}" 過濾書籍`);
        books = window.allBooks.filter(
          (book) =>
            book.title.toLowerCase().includes(searchTerm) ||
            book.author.toLowerCase().includes(searchTerm)
        );
        console.log(`找到 ${books.length} 本符合條件的書籍`);
      }

      // 先清空書籍列表區域
      const bookListElement = document.getElementById("book-list");
      if (bookListElement) {
        bookListElement.innerHTML = "";
      }

      // 重新渲染書籍列表
      renderBookList();

      // 處理搜尋結果為空的情況
      if (books.length === 0 && searchTerm !== "") {
        console.log(`沒有找到與「${searchTerm}」相關的書籍`);
        if (bookListElement) {
          const noResults = document.createElement("div");
          noResults.className = "book-grid__empty";
          // 使用 textContent 而不是 innerHTML，避免 XSS
          noResults.textContent = `沒有找到與「${searchTerm}」相關的書籍`;
          bookListElement.appendChild(noResults);
        }
      }
    }

    function debounce(func, delay) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function collectTags() {
      // 先將目前的標籤加入原始標籤集合
      books.forEach((book) => {
        book.tags.forEach((tag) => {
          allOriginalTags.add(tag);
          allTags.add(tag);
        });
      });
    }

    function populateTagSelect() {
      const tagOptions = document.getElementById("tag-dropdown-options");
      if (!tagOptions) return;

      // 保存當前選中的標籤
      const currentSelectedTag = state.currentTag;

      // 清除現有選項，優化「- 標籤 -」選項的處理
      tagOptions.innerHTML = `
        <div class="custom-dropdown__option ${currentSelectedTag === "" ? "selected" : ""}" data-value="">
          - 標籤 -
        </div>
      `;

      // 「- 標籤 -」選項的特殊處理
      const allTagOption = tagOptions.querySelector(
        '.custom-dropdown__option[data-value=""]'
      );
      allTagOption.addEventListener("click", (e) => {
        e.stopPropagation();

        // 更新選中項目的文本
        const selected = document.getElementById("tag-dropdown-selected");
        if (selected) {
          selected.textContent = "- 標籤 -";
        }

        // 更新選中狀態
        tagOptions
          .querySelectorAll(".custom-dropdown__option")
          .forEach((opt) => {
            opt.classList.toggle("selected", opt.dataset.value === "");
          });

        // 關閉下拉選單
        tagOptions.classList.remove("show");
        tagOptions.closest(".custom-dropdown").classList.remove("active");

        // 使用 null 作為標籤值，請求所有書籍
        console.log("選擇「- 標籤 -」，清空標籤過濾條件");
        filterBooksByTagValue("");
      });

      // 使用所有原始標籤 (allOriginalTags) 替代當前標籤 (allTags)
      Array.from(allOriginalTags)
        .sort()
        .forEach((tag) => {
          const option = document.createElement("div");
          option.className = `custom-dropdown__option ${tag === currentSelectedTag ? "selected" : ""}`;
          option.dataset.value = tag;
          option.textContent = tag;

          // 添加點擊事件處理器
          option.addEventListener("click", (e) => {
            e.stopPropagation();
            const tagValue = option.dataset.value;

            // 更新選中項目的文本和狀態
            const selected = document.getElementById("tag-dropdown-selected");
            if (selected) {
              selected.textContent = tagValue || "- 標籤 -";
            }

            // 更新選中狀態
            tagOptions
              .querySelectorAll(".custom-dropdown__option")
              .forEach((opt) => {
                opt.classList.toggle(
                  "selected",
                  opt.dataset.value === tagValue
                );
              });

            // 關閉下拉選單
            tagOptions.classList.remove("show");
            tagOptions.closest(".custom-dropdown").classList.remove("active");

            // 過濾書籍
            filterBooksByTagValue(tagValue);
          });

          tagOptions.appendChild(option);
        });
    }

    function renderBookList() {
      const bookListElement = document.getElementById("book-list");
      if (!bookListElement) return;

      const loadingElement = document.getElementById("loading");
      if (loadingElement) loadingElement.remove();

      bookListElement.innerHTML = "";

      if (books.length === 0) {
        const noBooks = document.createElement("p");
        noBooks.textContent = "沒有找到符合條件的書籍";
        noBooks.className = "book-grid__empty";
        bookListElement.appendChild(noBooks);
        return;
      }

      books.forEach((book) => {
        const bookCard = createBookCard(book);
        bookListElement.appendChild(bookCard);
      });
    }

    function createBookCard(book) {
      const bookCard = document.createElement("div");
      bookCard.className = "book-card";
      bookCard.dataset.id = book.id;

      // 使用安全的 HTML 創建方法
      const safeTitle = DOMPurify.sanitize(book.title);
      const safeAuthor = DOMPurify.sanitize(book.author);
      const safeLink = DOMPurify.sanitize(book.link);
      const safeImage = DOMPurify.sanitize(book.image);
      
      // 先使用 DOMPurify 清理 HTML
      const cardHTML = `
          <div class="book-card__image">
            <a href="${safeLink}" target="_blank" rel="noopener noreferrer" class="book-card__link">
              <img src="${safeImage}" alt="${safeTitle}" loading="lazy">
            </a>
          </div>
          <div class="book-card__content">
              <a href="${safeLink}" target="_blank" rel="noopener noreferrer" class="book-card__link">
                  <h3 class="book-card__title">${safeTitle}</h3>
              </a>
              <p class="book-card__author" style="display: flex; align-items: center; gap: 4px;">
                <img src="https://reading.udn.com/story/act/bd_2024storyawards/image/person.webp" alt="作者" width="16" height="16">
                ${safeAuthor}
              </p>
              <div class="book-card__tags">
                  ${book.tags
                    .map(tag => {
                      const safeTag = DOMPurify.sanitize(tag);
                      return `<span class="book-tag" data-tag="${safeTag}">#${safeTag}</span>`;
                    })
                    .join("")}
              </div>
              <div class="book-card__votes">
                  <span class="book-card__votes-block"><span class="book-card__votes-count">${book.votes}</span> 票</span>
                  <button class="book-card__vote-btn" data-id="${book.id}">
                      ${currentUser.isLoggedIn ? "我要投票 »" : "登入投票 »"}
                  </button>
              </div>
          </div>
      `;
      
      bookCard.innerHTML = DOMPurify.sanitize(cardHTML);

      const voteBtn = bookCard.querySelector(".book-card__vote-btn");
      voteBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        voteForBook(book.id);
      });

      const tagElements = bookCard.querySelectorAll(".book-tag");
      tagElements.forEach((tagElement) => {
        tagElement.addEventListener("click", (e) => {
          e.stopPropagation();
          const tagValue = e.target.dataset.tag;
          filterByTagValue(tagValue);
        });
      });

      // 禁用投票按鈕如果投票已截止
      if (isVotingEnded()) {
        voteBtn.disabled = true;
        voteBtn.textContent = "投票已截止";
      }

      return bookCard;
    }

    async function voteForBook(bookId) {
      try {
        if (!currentUser.isLoggedIn) {
          showLoginModal(bookId);
          return;
        }
        try {
          // 先檢查用戶今天的投票情況（批量檢查）
          const userVoteStatus = await apiClient.batchCheckVoteStatus(
            currentUser.id
          );

          if (
            userVoteStatus.data &&
            userVoteStatus.data.daily_votes_used >=
              userVoteStatus.data.max_daily_votes
          ) {
            console.log(
              `用戶今日已達到投票上限: ${userVoteStatus.data.daily_votes_used}/${userVoteStatus.data.max_daily_votes}`
            );
            SwalHelper.showVoteMessage(
              "already_voted",
              false,
              userVoteStatus.data.discount_pin_data
            );
            return;
          }

          // 再特別檢查是否對當前書籍投過票
          const checkResult = await apiClient.checkVoteStatus(
            bookId,
            currentUser.id
          );

          if (checkResult.data && checkResult.data.hasVotedForBookToday) {
            console.log(`伺服器確認用戶已經為此書投過票，書籍 ID: ${bookId}`);
            SwalHelper.showVoteMessage(
              "already_voted",
              false,
              checkResult.data.discount_pin_data
            );
            return;
          }
        } catch (error) {
          console.log("檢查投票狀態失敗:", error);
        }

        // 顯示 Cloudflare Turnstile 驗證
        console.log("顯示 Cloudflare Turnstile 驗證");
        SwalHelper.showCaptchaModal(async (confirmedBookId, cfToken) => {
          // 驗證成功後的回調處理
          console.log("Cloudflare Turnstile 驗證成功，令牌:", cfToken);

          // 顯示處理中的狀態
          const votingAlert = SwalHelper.showLoading("投票處理中...", "請稍候");

          try {
            // 嘗試獲取會員折扣碼資訊
            let discountPinData = null;
            try {
              // 批量檢查投票狀態同時獲取會員資訊
              const userStatus = await apiClient.batchCheckVoteStatus(
                currentUser.id
              );
              // 檢查是否包含會員折扣碼資訊
              if (
                userStatus.success &&
                userStatus.data &&
                userStatus.data.discount_pin_data
              ) {
                discountPinData = userStatus.data.discount_pin_data;
                console.log("已獲取用戶折扣碼資訊:", discountPinData);
              }
            } catch (infoError) {
              console.log("獲取會員資訊失敗:", infoError);
            }

            // 發送投票請求，包含驗證令牌
            const response = await fetch(VOTES_API_URL, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-User-ID": currentUser.id,
              },
              body: JSON.stringify({
                action: "vote",
                vote_id: bookId.toString(),
                option: "default",
                user_id: currentUser.id,
                cf_token: cfToken, // 添加 Cloudflare Turnstile 驗證令牌
              }),
            });

            if (!response.ok) {
              throw new Error(`HTTP 錯誤: ${response.status}`);
            }

            const responseData = await response.json();
            console.log(`投票請求響應:`, responseData);

            // 關閉處理中提示
            votingAlert.close();

            if (
              responseData.success &&
              responseData.data &&
              responseData.data.votes !== undefined
            ) {
              const bookIndex = books.findIndex((book) => book.id === bookId);
              if (bookIndex !== -1) {
                books[bookIndex].votes = responseData.data.votes;
                console.log(
                  `書籍 ${books[bookIndex].title} 的投票數更新為: ${responseData.data.votes}`
                );

                const listVotesCount = safeGetElement(
                  `.book-card[data-id="${bookId}"] .book-card__votes-count`
                );
                if (listVotesCount) {
                  listVotesCount.textContent = responseData.data.votes;
                }

                currentUser.votedBooks.add(bookId.toString());
                console.log(
                  `用戶投票記錄已更新，當前已投票書籍: ${Array.from(
                    currentUser.votedBooks
                  ).join(", ")}`
                );

                // 使用從回應中獲取的折扣碼資料（若存在）
                discountPinData =
                  responseData.data.discount_pin_data || discountPinData;
                if (discountPinData) {
                  console.log("用戶獲得折扣碼:", discountPinData);
                }

                // 同步更新 topthree 組件
                updateTopThreeDisplay();

                SwalHelper.showVoteMessage(
                  "投票成功！感謝您的參與",
                  true,
                  discountPinData
                );

                setTimeout(() => {
                  validateVotedBooks();
                }, 1000);
              }
            } else {
              throw new Error(responseData.message || "投票處理失敗");
            }
          } catch (error) {
            // 關閉處理中提示
            votingAlert.close();
            // 處理已投票或投票上限等特殊情況
            if (
              error.message &&
              (error.message.includes("您今天已經為這本書投過票了") ||
                error.message.includes("您今天的投票次數已達上限"))
            ) {
              handleVoteLimitError(error, bookId);
            } else {
              SwalHelper.showVoteMessage(
                error.message || "投票失敗，請稍後再試",
                false
              );
            }
          }
        }, bookId);
      } catch (error) {
        console.error("投票操作失敗:", error);
        if (error.message === "請先登入會員") {
          showLoginModal(bookId);
        } else {
          SwalHelper.showVoteMessage(
            error.message || "投票失敗，請稍後再試",
            false
          );
        }
      }
    }

    /**
     * 處理投票達上限或已投過票的錯誤
     */
    async function handleVoteLimitError(error, bookId) {
      console.log("處理投票限制或已投票錯誤:", error.message);

      // 嘗試獲取會員折扣碼資訊
      let discountPinData = null;
      try {
        // 批量檢查投票狀態同時獲取會員資訊
        const userStatus = await apiClient.batchCheckVoteStatus(currentUser.id);
        if (userStatus.success && userStatus.data) {
          // 如果回應中有會員折扣碼資訊
          if (userStatus.data.discount_pin_data) {
            discountPinData = userStatus.data.discount_pin_data;
          }
          console.log("獲取用戶折扣碼資訊:", discountPinData);
        }
      } catch (infoError) {
        console.log("獲取會員資訊失敗:", infoError);
      }

      // 顯示 already_voted 燈箱，並傳入折扣碼資料
      SwalHelper.showVoteMessage("already_voted", false, discountPinData);

      // 更新用戶已投票書籍集合
      currentUser.votedBooks.add(bookId.toString());

      // 重新驗證投票記錄
      setTimeout(() => {
        validateVotedBooks();
      }, 1000);
    }

    function safeGetElement(selector) {
      const element = document.querySelector(selector);
      if (!element) {
        console.warn(`Element "${selector}" not found`);
      }
      return element;
    }

    function showError(message) {
      SwalHelper.showError(message);

      const loadingElement = document.getElementById("loading");
      if (loadingElement) loadingElement.style.display = "none";

      const bookListElement = document.getElementById("book-list");
      if (bookListElement) {
        bookListElement.innerHTML = `<div class="error-message">載入失敗：${message || "請檢查網路連接並重試"}</div>`;
      }
    }

    async function validateVotedBooks() {
      try {
        console.log("開始驗證投票記錄...");

        if (!currentUser.isLoggedIn || !currentUser.id) {
          console.log("用戶未登入，清除投票記錄");
          currentUser.votedBooks.clear();
          updateVoteButtonsState();
          return;
        }

        const result = await apiClient.batchCheckVoteStatus(currentUser.id);

        if (result && result.success && result.data) {
          currentUser.votedBooks.clear();

          if (
            result.data.today_voted_books &&
            Array.isArray(result.data.today_voted_books)
          ) {
            result.data.today_voted_books.forEach((bookId) => {
              currentUser.votedBooks.add(bookId.toString());
            });
          }

          console.log(
            "從伺服器獲取的投票記錄已更新:",
            Array.from(currentUser.votedBooks)
          );

          updateVoteButtonsState();

          console.log("投票統計信息:", {
            今日已投票數: result.data.daily_votes_used,
            今日剩餘投票數: result.data.daily_votes_remaining,
            每日投票上限: result.data.max_daily_votes,
          });
        }
      } catch (error) {
        console.error("驗證投票記錄時出錯:", error);
      }
    }

    function updateVoteButtonsState() {
      const bookCards = document.querySelectorAll(".book-card");

      bookCards.forEach((card) => {
        const bookId = card.dataset.id;
        const voteBtn = card.querySelector(".book-card__vote-btn");

        if (voteBtn) {
          if (isVotingEnded()) {
            voteBtn.disabled = true;
            voteBtn.textContent = "投票已截止";
          } else if (!currentUser.isLoggedIn) {
            voteBtn.disabled = false;
            voteBtn.textContent = "登入投票 »";
          } else if (currentUser.votedBooks.has(bookId)) {
            voteBtn.disabled = false;
            voteBtn.textContent = "我要投票 »";
          } else {
            voteBtn.disabled = false;
            voteBtn.textContent = "我要投票 »";
          }
        }
      });
    }

    document.addEventListener("visibilitychange", function () {
      if (document.visibilityState === "visible") {
        window.memberAuth.checkLoginStatus().then(() => {
          currentUser = window.memberAuth.getUser();
          updateVoteButtonsState();
          validateVotedBooks();
        });
      }
    });

    function filterByTagValue(tagValue) {
      // 在自定義下拉選單中找到對應的標籤選項並模擬點擊
      const tagOptions = document.querySelectorAll(
        "#tag-dropdown-options .custom-dropdown__option"
      );

      for (const option of tagOptions) {
        if (option.dataset.value === tagValue) {
          // 更新選中項目的文本
          const selected = document.getElementById("tag-dropdown-selected");
          if (selected) selected.textContent = option.textContent;

          // 更新選中狀態
          tagOptions.forEach((opt) => opt.classList.remove("selected"));
          option.classList.add("selected");

          // 過濾書籍
          filterBooksByTagValue(tagValue);

          // 滾動到book-header位置
          const bookHeader = document.getElementById("book-header");
          if (bookHeader) {
            setTimeout(() => {
              bookHeader.scrollIntoView({behavior: "smooth", block: "start"});
            }, 100);
          }

          break;
        }
      }
    }

    // 新增 updateDropdownsState 函數
    function updateDropdownsState() {
      // 更新標籤下拉選單狀態
      const tagSelected = document.getElementById("tag-dropdown-selected");
      const tagOptions = document.querySelectorAll(
        "#tag-dropdown-options .custom-dropdown__option"
      );

      if (tagSelected) {
        // 若有標籤則顯示標籤名稱，否則顯示「- 標籤 -」
        const displayText = state.currentTag || "- 標籤 -";
        if (tagSelected.textContent !== displayText) {
          tagSelected.textContent = displayText;
        }
      }

      // 更新標籤選項的選中狀態
      tagOptions.forEach((option) => {
        const isSelected = option.dataset.value === state.currentTag;
        option.classList.toggle("selected", isSelected);
      });

      // 更新排序下拉選單狀態
      const sortSelected = document.getElementById("sort-dropdown-selected");
      const sortOptions = document.querySelectorAll(
        "#sort-dropdown-options .custom-dropdown__option"
      );

      if (sortSelected) {
        // 根據當前排序狀態設置顯示文字
        let sortText;
        if (state.currentSort === "random") {
          sortText = "隨機排列";
        } else if (state.currentSort === "votes") {
          sortText =
            state.currentOrder === "desc" ? "票數高到低" : "票數低到高";
        }

        if (sortSelected.textContent !== sortText) {
          sortSelected.textContent = sortText;
        }
      }

      // 更新排序選項的選中狀態
      let currentSortValue;
      if (state.currentSort === "random") {
        currentSortValue = "random";
      } else {
        currentSortValue = `${state.currentSort}-${state.currentOrder}`;
      }

      sortOptions.forEach((option) => {
        const isSelected = option.dataset.value === currentSortValue;
        option.classList.toggle("selected", isSelected);
      });

      // 記錄當前狀態到控制台
      console.log("UI 狀態已更新:", {
        tag: state.currentTag || "(- 標籤 -)",
        sort: state.currentSort,
        order: state.currentOrder,
      });
    }

    // 新增 updateTopThreeDisplay 函數
    function updateTopThreeDisplay() {
      const topThreeEvent = new CustomEvent("updateTopThree");
      window.dispatchEvent(topThreeEvent);
      console.log("已觸發更新前三名排行的事件");
    }
  </script>

  <style lang="scss" is:global>
    .book-header {
      text-align: center;
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      margin-bottom: 2rem;
      @media (max-width: 450px) {
        width: 100%;
      }
      .book-mobile {
        display: none;
        font-size: 16px;
        margin-bottom: 1rem;
        color: #ffffff;
        @media (max-width: 768px) {
          display: block;
        }
      }
      .book-list {
        width: 100%;
        max-width: 262px;
        margin: 0 auto;
        display: block;
        @media (max-width: 450px) {
          max-width: 156px;
        }
      }
      &__image {
        width: 100%;
        max-width: 262px;
        margin: 0 auto;
        display: block;
      }

      &__title {
        font-size: 22px;
        margin-bottom: 1rem;
        color: #ffffff;
        padding-bottom: 0.5rem;
        text-align: center;
      }
    }

    .book-filter {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 20px;
      margin: 0 auto;
      width: 100%;
      max-width: 1080px;
      @media (max-width: 768px) {
        width: 86%;
      }
      @media (max-width: 450px) {
        width: 100%;
      }

      &__left {
        flex: 1;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        @media (max-width: 450px) {
          flex-direction: column;
          gap: 10px;
        }
      }

      &__center {
        flex: 2;
        text-align: center;
      }

      &__right {
        flex: 1;
        display: flex;
        justify-content: flex-end;
        gap: 20px;
        @media (max-width: 450px) {
          gap: 10px;
        }
      }

      &__title {
        color: #ffffff;
        font-size: 20px;
        margin-left: 19%;
        @media (max-width: 768px) {
          display: none;
        }
      }

      &__search {
        width: 100%;
        max-width: 200px;
        padding: 8px 12px 8px 35px; // 修改內邊距，左側容納圖示
        border: 1px solid #ddd;
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 24px;

        @media (max-width: 450px) {
          max-width: 320px;
          width: 100%;
        }
        @media (max-width: 320px) {
          max-width: 300px;
        }
      }

      &__tag,
      &__sort {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      &__label {
        font-size: 14px;
        color: #ffffff;
      }
    }

    .search-container {
      position: relative;
      width: 100%;
      max-width: 200px;

      @media (max-width: 450px) {
        max-width: 320px;
      }
      @media (max-width: 320px) {
        max-width: 300px;
      }

      .search-icon {
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        pointer-events: none;
      }
    }

    /* 自定義下拉選單樣式 */
    .custom-dropdown {
      position: relative;
      min-width: 120px;
      user-select: none;

      &__selected {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 8px 12px;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid #ddd;
        border-radius: 10px;
        color: #ffffff;
        cursor: pointer;
        transition: background-color 0.2s ease;

        &:after {
          content: "";
          border-style: solid;
          border-width: 5px 5px 0 5px;
          border-color: #ffffff transparent transparent transparent;
          margin-left: 10px;
          transition: transform 0.2s ease;
        }
      }

      &.active &__selected:after {
        transform: rotate(180deg);
      }

      &__options {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-top: 5px;
        max-height: 0;
        overflow: hidden;
        z-index: 100;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;

        &.show {
          width: 100%;
          max-height: 250vh; /* 限制最大高度 */
          opacity: 1;
          visibility: visible;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

          .custom-dropdown__options-container {
            padding: 8px 0;
          }
        }
      }

      &__options-container {
        padding: 0;
        transition: padding 0.3s ease;
      }

      &__option {
        padding: 8px 12px;
        color: #333;
        cursor: pointer;
        transition: background-color 0.2s ease;

        &:hover {
          background-color: #f5f5f5;
        }

        &.selected {
          color: #f37562;
          font-weight: bold;
        }
      }
    }

    /* 新增下拉選單包裝器樣式 */
    .dropdown-wrapper {
      width: 150px;

      .custom-dropdown {
        width: 100%;

        &__selected {
          width: 100%;
          min-width: 150px;
        }

        &__options {
          width: 150px;
        }

        &__option {
          width: 100px;
          margin: 10px auto;
          text-align: center;
          border-bottom: #d5d5d5 1px solid;
          padding: 10px 0;

          &:last-child {
            border-bottom: none;
          }
        }
      }
    }

    .book-main {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
    }

    .book-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 15px;
      margin: 0 auto; /* 新增此行使網格置中 */
      padding-top: 20px;
      justify-items: center; /* 新增此行使網格項目置中 */

      &__loading {
        text-align: center;
        padding: 20px;
        color: #ffffff;
        font-style: italic;
        grid-column: 1 / -1;
      }

      &__empty {
        text-align: center;
        padding: 30px;
        color: #ffffff;
        font-style: italic;
        grid-column: 1 / -1;
      }
    }

    .book-card {
      position: relative;
      transition:
        transform 0.3s ease,
        box-shadow 0.3s ease;
      overflow: hidden;
      border-radius: 30px;
      color: inherit;
      display: block;
      background: linear-gradient(
        to bottom,
        rgba(255, 255, 255, 1) 0.5%,
        rgba(242, 217, 254, 1) 2%,
        rgba(255, 255, 255, 0.5) 100%
      );
      height: 551px;
      width: 100%;
      max-width: 280px;

      &:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
      }

      &__image {
        text-align: center;
        padding: 15px 0;

        img {
          width: 90%;
          max-width: 200px;
          height: 270px;
          object-fit: cover;
          display: inline-block;
          box-shadow: 0 10px 10px rgba(0, 0, 0, 0.2);
          transition: transform 0.3s ease;
        }
      }

      &:hover &__image img {
        transform: scale(1.03);
      }

      &__content {
        display: flex;
        flex-direction: column;
        max-width: 210px;
        margin: 0 auto; /* 使內容區域置中 */
      }

      /* RWD 小於 450px 時的橫向排列 */
      @media (max-width: 450px) {
        height: auto;
        max-width: 100%;
        display: flex;
        flex-direction: row;
        align-items: stretch; /* 從 center 改為 stretch，使元素高度一致 */
        padding: 10px;
        border-radius: 10px;

        &__image {
          width: 40%;
          display: flex;
          align-items: center;

          img {
            width: 100%;
            height: 190px;
            max-width: 140px;
            border-radius: 10px;
          }
        }

        &__content {
          width: 60%;
          height: 100%; /* 保證高度為 100% */
          padding: 5px 10px;
          display: flex;
          flex-direction: column;
          justify-content: center; /* 垂直居中內容 */
          @media (max-width: 450px) {
            padding: 10px;
          }
        }
      }

      &__link {
        text-decoration: none;
        color: inherit;
        display: block;
      }

      &__title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 8px;
        color: #333;
        display: block;
        min-height: 50px; /* 從固定 height 改為 min-height */
        word-wrap: break-word;
        text-align: center;
        @media (max-width: 450px) {
          min-height: 40px; /* 調整小於 450px 時的最小高度 */
          text-align: left;
        }
      }

      &__author {
        font-size: 16px;
        color: #ffffff;
        margin-bottom: 10px;
        text-align: left;
        @media (max-width: 450px) {
          margin-bottom: 5px;
        }
      }

      &__tags {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-bottom: 12px;
        cursor: pointer;
        @media (max-width: 450px) {
          margin-bottom: 6px;
        }
      }

      &__votes {
        width: 100%;
        display: flex;
        flex-direction: column;
        margin-top: 5%;
        font-size: 16px;
        color: #555;
        text-align: center;
        &__text {
          margin-right: 10px;
          font-size: 16px;
          color: #333;
        }
        &__text:hover {
          text-decoration: underline;
        }
      }

      &__votes-block {
        display: block;
        text-align: center;
        width: 100%;
        margin-bottom: 10px;
        color: #ffffff;
      }

      &__votes-count {
        font-weight: bold;
        color: #ffffff;
        font-size: 24px;
        letter-spacing: 1px;
        line-height: 25px;
      }
      &__vote-btn {
        background-color: #f37562;
        color: #ffffff;
        border: none;
        border-radius: 24px;
        font-size: 16px;
        cursor: pointer;
        padding: 10px 20px;
        transition:
          background-color 0.2s ease,
          transform 0.2s ease;
        &:hover {
          background-color: #333333;
        }
        @media (max-width: 450px) {
          width: 100%;
          max-width: 175px;
        }
      }
    }

    .book-tag {
      padding: 4px 8px;
      font-size: 16px;
      color: #000000;
      text-decoration: underline;
      transition: background-color 0.2s ease;
      @media (max-width: 450px) {
        padding: 0;
      }

      &:hover {
        background-color: rgba(189, 195, 199, 0.9);
      }
    }

    .book-footer {
      text-align: center;
      margin-top: 40px;
      color: #ffffff;
      padding-bottom: 20px;
    }

    .error-message {
      text-align: center;
      padding: 20px;
      color: #ef4444;
      background-color: #fee2e2;
      border-radius: 6px;
      margin: 20px 0;
    }
  </style>
</header>
