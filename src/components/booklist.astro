---
export interface Food {
  id: number;
  title: string;
  image: string;
  link: string;
  votes: number;
  tags: string[];
}

// 在伺服器端獲取初始食物數據
const API_BASE_URL = "https://lab-event.udn.com/bd_500bowls_vote2025_test/API/";
const FOODS_API_URL = `${API_BASE_URL}food.php`;

async function fetchInitialFoods() {
  try {
    const response = await fetch(FOODS_API_URL);
    if (!response.ok) throw new Error(`HTTP 錯誤: ${response.status}`);

    const data = await response.json();
    if (data && data.success && data.data && data.data.foods) {
      return data.data.foods;
    }
    return [];
  } catch (error) {
    console.error("獲取初始食物數據失敗:", error);
    return [];
  }
}

// 獲取初始食物列表用於 SSR
const initialFoods = await fetchInitialFoods();
---

<header class="food-header" id="food-header">
  <img class="food-list" src="/image/list_logo.svg" alt="list_logo" />
  <div class="food-filter">
    <div class="food-filter__left">
      <div class="search-container">
        <svg
          class="search-icon"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
        >
          <path d="M0,0H24V24H0Z" fill="none"></path>
          <path id="path_1350" data-name="path 1350" d="M0,0H24V24H0Z" fill="none"></path>
          <path
            id="path_1351"
            data-name="path 1351"
            d="M15.5,14h-.79l-.28-.27a6.51,6.51,0,1,0-.7.7l.27.28v.79l5,4.99L20.49,19Zm-6,0A4.5,4.5,0,1,1,14,9.5,4.494,4.494,0,0,1,9.5,14Z"
            fill="#000"></path>
        </svg>
        <input type="text" id="search-input" class="food-filter__search" placeholder="搜尋美食" />
      </div>
      <div class="food-filter__center"></div>
      <div class="food-filter__right">
        <div class="food-filter__tag dropdown-wrapper">
          <div class="custom-dropdown">
            <div class="custom-dropdown__selected" id="tag-dropdown-selected">所有食物</div>
            <div class="custom-dropdown__options" id="tag-dropdown-options">
              <div class="custom-dropdown__option selected" data-value="">所有食物</div>
              <!-- 標籤選項將由 JavaScript 動態添加 -->
            </div>
          </div>
        </div>
        <div class="food-filter__sort dropdown-wrapper">
          <div class="custom-dropdown">
            <div class="custom-dropdown__selected selected" id="sort-dropdown-selected">
              隨機排列
            </div>
            <div class="custom-dropdown__options" id="sort-dropdown-options">
              <div class="custom-dropdown__option" data-value="random">隨機排列</div>
              <div class="custom-dropdown__option" data-value="votes-desc">票數高到低</div>
              <div class="custom-dropdown__option" data-value="votes-asc">票數低到高</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <main class="food-main">
    <section id="food-list" class="food-grid">
      <div id="loading" class="food-grid__loading">載入中...</div>
      <!-- 使用伺服器端渲染的初始食物列表 -->
      {
        initialFoods.map((food) => (
          <div class="food-card" data-id={food.id}>
            <div class="food-card__image">
              <a class="food-card__link">
                <img src={food.image} alt={food.title} loading="lazy" />
              </a>
            </div>
            <div class="food-card__content">
              <a class="food-card__link">
                <h3 class="food-card__title">{food.title}</h3>
              </a>
              <div class="food-card__tags">
                <span class="food-tag" data-tag={food.tags}>
                  #{food.tags}
                </span>
              </div>
              <div class="food-card__votes">
                <span class="food-card__votes-block">
                  <span class="food-card__votes-count">{food.votes}</span> 票
                </span>
                <button class="food-card__vote-btn" data-id={food.id}>
                  登入投票 »
                </button>
              </div>
            </div>
          </div>
        ))
      }
    </section>
  </main>
</header>

<!-- 引入自定義 SweetAlert2 樣式 -->
<style is:global>
  @import "../styles/sweetalert2.scss";
</style>

<script>
  import SwalHelper from "../js/sweetalert2Helper.js";
  import Swal from "sweetalert2";
  import DOMPurify from "dompurify";
  import "../js/memberAuth.js";

  // 將 Swal、DOMPurify、memberAuth 設置為全域變數
  window.Swal = Swal;
  window.DOMPurify = DOMPurify;
  // window.memberAuth 已在 memberAuth.js 內設為全域

  const API_BASE_URL = "https://lab-event.udn.com/bd_500bowls_vote2025_test/API/";
  const FOODS_API_URL = `${API_BASE_URL}food.php`;
  const VOTES_API_URL = `${API_BASE_URL}votefood.php`;
  const UDN_LOGIN_URL = "https://member.udn.com/member/login.jsp";

  // 設定投票截止時間 - 2025年6月19日 10:00
  const VOTE_END_DATE = new Date("2025-06-19T10:00:00+08:00");

  // 檢查投票是否已截止
  function isVotingEnded() {
    const now = new Date();
    return now >= VOTE_END_DATE;
  }

  console.log("使用API基礎URL:", API_BASE_URL);
  console.log("投票截止時間:", VOTE_END_DATE.toLocaleString("zh-TW"));

  let foods = [];
  let allTags = new Set();
  let allOriginalTags = new Set(); // 新增：存儲所有原始標籤
  let currentUser = window.memberAuth.getUser();

  const state = {
    currentTag: "",
    currentSort: "random",
    currentOrder: "desc",
    lazyLoadItems: 12, // 初始顯示的數量
    lazyLoadIncrement: 12, // 每次加載的數量
    displayedFoods: [], // 目前顯示的書籍
    isLoading: false, // 是否正在加載更多內容
  };

  const apiClient = {
    timeout: 10000,

    async fetch(url, options = {}) {
      const fetchPromise = fetch(url, options);
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          reject(new Error("請求超時，請檢查網路連接"));
        }, this.timeout);
      });

      try {
        const response = await Promise.race([fetchPromise, timeoutPromise]);

        if (response.status === 401) {
          throw new Error("請先登入會員");
        }

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.message || `HTTP 錯誤: ${response.status}`);
        }

        return await response.json();
      } catch (error) {
        console.error(`API 請求失敗: ${url}`, error);
        throw error;
      }
    },

    buildQueryParams(params = {}) {
      const queryParams = new URLSearchParams();

      for (const [key, value] of Object.entries(params)) {
        if (value !== undefined && value !== null && value !== "") {
          queryParams.append(key, value);
        }
      }

      const queryString = queryParams.toString();
      return queryString ? `?${queryString}` : "";
    },

    async getFoods(tag = "", sort = "votes-desc") {
      const params = {};

      // 確保空字串標籤不會被發送到後端
      if (tag && tag !== "") {
        params.tag = tag;
      }

      // 處理排序參數
      if (sort !== "random") {
        const [sortType, orderType] = sort.split("-");
        params.sort = sortType;
        params.order = orderType;
      }

      const url = FOODS_API_URL + this.buildQueryParams(params);
      console.log("請求URL:", url, "參數:", params);

      try {
        const response = await this.fetch(url);
        if (response && response.success && response.data) {
          return response.data.foods || [];
        } else {
          throw new Error(response.message || "獲取食物資料失敗");
        }
      } catch (error) {
        console.error("獲取食物資料失敗:", error);
        throw error;
      }
    },

    async voteForFood(foodId, userId) {
      if (!currentUser.isLoggedIn) {
        throw new Error("請先登入會員");
      }

      const url = VOTES_API_URL;
      const data = {
        action: "vote",
        vote_id: foodId.toString(),
        option: "default",
        user_id: userId,
      };

      console.log(`發送投票請求: ${url}`, data);

      try {
        const response = await this.fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-User-ID": userId,
          },
          body: JSON.stringify(data),
        });

        if (!response.success) {
          throw new Error(response.message || "投票失敗");
        }

        return response;
      } catch (error) {
        console.error(`投票請求失敗: ${url}`, error);
        throw error;
      }
    },

    async checkVoteStatus(foodId, userId) {
      if (!userId || !currentUser.isLoggedIn) {
        return { success: true, data: { has_voted: false } };
      }

      const url = VOTES_API_URL;
      const data = {
        action: "check_vote",
        vote_id: foodId.toString(),
        user_id: userId,
      };

      console.log(`檢查投票狀態: ${url}`, data);

      try {
        const response = await this.fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-User-ID": userId,
          },
          body: JSON.stringify(data),
        });

        if (!response.success) {
          throw new Error(response.message || "檢查投票狀態失敗");
        }

        return response;
      } catch (error) {
        console.error(`檢查投票狀態失敗: ${url}`, error);
        throw error;
      }
    },

    async batchCheckVoteStatus(userId) {
      const url = VOTES_API_URL;
      const data = {
        action: "batch_check_vote",
        user_id: userId,
      };

      console.log(`批量檢查投票狀態: ${url}`, data);

      try {
        const response = await this.fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-User-ID": userId,
          },
          body: JSON.stringify(data),
        });

        if (!response.success) {
          throw new Error(response.message || "批量檢查投票狀態失敗");
        }

        return response;
      } catch (error) {
        console.error(`批量檢查投票狀態失敗: ${url}`, error);
        throw error;
      }
    },
  };

  // 使用加強版的 DOMPurify 配置，以更好防禦 XSS 攻擊
  function setupEnhancedDOMPurify() {
    // 確保 DOMPurify 已載入
    if (typeof DOMPurify !== "undefined") {
      // 設置 DOMPurify 配置為最嚴格模式
      DOMPurify.setConfig({
        ALLOWED_TAGS: ["a", "img", "h3", "p", "span", "svg", "path", "div", "button"],
        ALLOWED_ATTR: [
          "href",
          "target",
          "rel",
          "class",
          "id",
          "src",
          "alt",
          "loading",
          "style",
          "data-id",
          "data-tag",
          "fill",
          "xmlns",
          "viewBox",
          "width",
          "height",
        ],
        ALLOW_DATA_ATTR: true,
        SAFE_FOR_TEMPLATES: true,
        RETURN_DOM: false,
        ADD_ATTR: ["target", "rel"], // 確保 target="_blank" 與  被保留
      });

      // 添加鉤子，確保所有連結都具有安全屬性
      DOMPurify.addHook("afterSanitizeAttributes", function (node) {
        if ("target" in node) {
          node.setAttribute("target", "_blank");
          node.setAttribute("rel", "noopener noreferrer");
        }
      });

      console.log("已啟用增強型 DOMPurify 防護");
    } else {
      console.warn("DOMPurify 未載入，XSS 防護可能不完整");
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    // 初始化增強版 DOMPurify 配置以防 XSS
    setupEnhancedDOMPurify();

    window.memberAuth.checkLoginStatus().then(() => {
      currentUser = window.memberAuth.getUser();
      // 確保 votedFoods 是 Set 物件------
      ensureUserVotedFoods();
      updateVoteButtonsState();
      validateVotedFoods();
    });

    // 初始化自定義下拉選單
    initCustomDropdowns();

    const searchInput = document.getElementById("search-input");
    if (searchInput) {
      // 添加輸入事件處理，使用防抖函數
      searchInput.addEventListener("input", debounce(searchFoods, 300));

      // 添加按下 Esc 鍵清空搜尋欄
      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          searchInput.value = "";
          // 觸發搜尋以恢復原始美食列表
          searchFoods({ target: searchInput });
        }
      });
    }

    // 確保所有美食卡片連結在新分頁打開
    ensureLinksOpenInNewTab();

    // 設置 MutationObserver 觀察 DOM 變化
    setupLinkObserver();

    fetchFoods(null, "random");

    validateVotedFoods();
  });

  // 確保所有美食卡片連結在新分頁打開的函數
  function ensureLinksOpenInNewTab() {
    // 選擇所有的美食卡片連結
    const foodLinks = document.querySelectorAll(".food-card__link");

    // 為每個連結添加 target="_blank" 和  屬性
    foodLinks.forEach((link) => {
      if (!link.getAttribute("target")) {
        link.setAttribute("target", "_blank");
      }
      if (!link.getAttribute("rel") || !link.getAttribute("rel").includes("noopener")) {
        link.setAttribute("rel", "noopener noreferrer");
      }
    });
  }

  // 觀察 DOM 變化，對新添加的連結進行處理
  function setupLinkObserver() {
    // 創建一個 MutationObserver 實例
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.addedNodes && mutation.addedNodes.length > 0) {
          // 檢查新添加的節點中是否有書籍卡片連結
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === 1) {
              // Element 節點
              // 檢查節點本身
              if (node.classList && node.classList.contains("food-card__link")) {
                ensureLinkAttributes(node);
              }

              // 檢查節點內的子元素
              const links = node.querySelectorAll(".food-card__link");
              links.forEach((link) => ensureLinkAttributes(link));
            }
          });
        }
      });
    });

    // 配置觀察選項
    const config = {
      childList: true,
      subtree: true,
    };

    // 開始觀察 document.body
    observer.observe(document.body, config);
  }

  // 為單個連結設置屬性
  function ensureLinkAttributes(link) {
    if (!link.getAttribute("target")) {
      link.setAttribute("target", "_blank");
    }
    if (!link.getAttribute("rel") || !link.getAttribute("rel").includes("noopener")) {
      link.setAttribute("rel", "noopener noreferrer");
    }
  }

  // 初始化自定義下拉選單
  function initCustomDropdowns() {
    // 為每個自定義下拉選單添加事件監聽器
    const customDropdowns = document.querySelectorAll(".custom-dropdown");

    customDropdowns.forEach((dropdown) => {
      const selected = dropdown.querySelector(".custom-dropdown__selected");
      const options = dropdown.querySelector(".custom-dropdown__options");

      // 點擊下拉標題時顯示/隱藏選項
      selected.addEventListener("click", (e) => {
        e.stopPropagation();

        // 關閉其他所有下拉選單
        document.querySelectorAll(".custom-dropdown__options").forEach((el) => {
          if (el !== options) {
            el.classList.remove("show");
          }
        });

        options.classList.toggle("show");
        dropdown.classList.toggle("active");
      });

      // 為每個選項添加點擊事件
      const optionElements = dropdown.querySelectorAll(".custom-dropdown__option");
      optionElements.forEach((option) => {
        option.addEventListener("click", (e) => {
          e.stopPropagation();

          // 更新選中項目的文本
          selected.textContent = option.textContent;

          // 更新選中狀態
          optionElements.forEach((opt) => opt.classList.remove("selected"));
          option.classList.add("selected");

          // 關閉下拉選單
          options.classList.remove("show");
          dropdown.classList.remove("active");

          // 處理選擇事件
          const value = option.dataset.value;

          if (dropdown.closest(".food-filter__tag")) {
            filterFoodsByTagValue(value);
          } else if (dropdown.closest(".food-filter__sort")) {
            sortFoodsByValue(value);
          }
        });
      });
    });

    // 點擊頁面其他地方時關閉所有下拉選單
    document.addEventListener("click", () => {
      document.querySelectorAll(".custom-dropdown__options").forEach((el) => {
        el.classList.remove("show");
      });
      document.querySelectorAll(".custom-dropdown").forEach((el) => {
        el.classList.remove("active");
      });
    });
  }

  // 根據標籤值過濾書籍
  function filterFoodsByTagValue(tagValue) {
    console.log(`按標籤過濾: "${tagValue}"`);

    // 如果標籤值是空字串，表示「所有食物」，將其設為 null
    const apiTagValue = tagValue === "" ? null : tagValue;

    // 更新狀態
    state.currentTag = tagValue;

    const currentSort = `${state.currentSort}-${state.currentOrder}`;
    console.log(`過濾標籤值: "${tagValue}", API 參數: ${apiTagValue}, 當前排序: ${currentSort}`);

    // 傳遞 null 而不是空字串給 fetchFoods
    fetchFoods(apiTagValue, currentSort === "random-desc" ? "random" : currentSort);
  }

  // 根據排序值排序書籍
  function sortFoodsByValue(sortValue) {
    console.log(`按值排序: ${sortValue}`);
    fetchFoods(state.currentTag === "" ? null : state.currentTag, sortValue);
  }

  // 優化後的洗牌函數，確保使用加密安全的隨機數
  function shuffleArray(array) {
    // 檢查是否支援 crypto.getRandomValues API
    if (window.crypto && window.crypto.getRandomValues) {
      // 使用加密安全的隨機數進行洗牌
      const randomValues = new Uint32Array(array.length);
      window.crypto.getRandomValues(randomValues);

      const randomized = array.map((value, i) => ({
        value,
        sort: randomValues[i],
      }));

      randomized.sort((a, b) => a.sort - b.sort);

      for (let i = 0; i < array.length; i++) {
        array[i] = randomized[i].value;
      }
    } else {
      // 降級使用 Fisher-Yates 洗牌算法

      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }

    return array;
  }

  async function fetchFoods(tag = null, sort = "random") {
    try {
      const loadingElement = document.getElementById("loading");
      if (loadingElement) loadingElement.style.display = "block";

      console.log(`請求書籍數據 - 原始標籤: "${tag}", 原始排序: ${sort}`);

      // 更新全局狀態 - null 標籤表示「所有食物」
      state.currentTag = tag || "";

      if (sort === "random") {
        state.currentSort = "random";
        state.currentOrder = "desc";
      } else {
        const [sortType, order] = sort.split("-");
        state.currentSort = sortType;
        state.currentOrder = order;
      }

      // 構建 API 請求參數
      const params = {};

      // 只有當標籤不為 null 時才加入參數
      if (tag !== null && tag !== "") {
        params.tag = tag;
      }

      // 處理排序參數
      if (sort !== "random") {
        const [sortType, orderType] = sort.split("-");
        params.sort = sortType;
        params.order = orderType;
      }

      // 使用修改後的 params 構建 URL
      const url = FOODS_API_URL + apiClient.buildQueryParams(params);
      console.log("API 請求 URL:", url, "參數:", params);

      // 直接使用 fetch 請求，而不是 apiClient.getFoods
      const response = await apiClient.fetch(url);
      if (response && response.success && response.data) {
        foods = response.data.foods || [];
      } else {
        throw new Error(response.message || "獲取美食資料失敗");
      }

      window.allFoods = [...foods];

      // 只在隨機排序時打亂順序
      if (sort === "random" && foods.length > 0) {
        shuffleArray(foods);
      }

      // 重置懶加載狀態
      state.displayedFoods = [];
      state.isLoading = false;

      // 更新 UI
      collectTags();
      populateTagSelect();
      updateDropdownsState();
      renderFoodList();

      // 日誌輸出獲取的書籍數量
      console.log(
        `成功獲取 ${foods.length} 本書，初始顯示 ${Math.min(state.lazyLoadItems, foods.length)} 本`
      );
    } catch (error) {
      handleFetchError(error);
    }
  }

  // 修改錯誤處理函數
  function handleFetchError(error) {
    console.error("獲取書籍資料失敗:", error);
    showError("無法載入書籍資料，請稍後再試。");

    const loadingElement = document.getElementById("loading");
    if (loadingElement) loadingElement.style.display = "none";

    const foodListElement = document.getElementById("food-list");
    if (foodListElement) {
      const errorDiv = document.createElement("div");
      errorDiv.className = "error-message";
      // 使用 textContent 而不是 innerHTML，避免 XSS
      errorDiv.textContent = `載入失敗：${error.message || "請檢查網路連接並重試"}`;
      foodListElement.innerHTML = "";
      foodListElement.appendChild(errorDiv);
    }
  }

  function showLoginModal(foodId) {
    SwalHelper.showLoginModal().then((result) => {
      if (result.isConfirmed) {
        SwalHelper.redirectToLogin(UDN_LOGIN_URL);
      }
    });
  }

  function searchFoods(event) {
    // 安全處理使用者輸入
    const searchTerm = DOMPurify.sanitize(event.target.value.trim()).toLowerCase();
    console.log(`執行搜尋: "${searchTerm}"`);

    if (!window.allFoods || window.allFoods.length === 0) {
      console.log("沒有原始食物數據可供搜尋");
      return;
    }

    // 重置食物列表
    if (searchTerm === "") {
      console.log("搜尋詞為空，恢復完整食物列表");
      foods = [...window.allFoods];
    } else {
      console.log(`根據關鍵詞 "${searchTerm}" 過濾食物`);
      foods = window.allFoods.filter(
        (food) =>
          food.title.toLowerCase().includes(searchTerm) ||
          (food.tags && food.tags.toLowerCase().includes(searchTerm)) // 處理單一標籤搜尋
      );
      console.log(`找到 ${foods.length} 個符合條件的食物`);
    }

    // 重置懶加載狀態
    state.displayedFoods = [];
    state.isLoading = false;

    // 先清空食物列表區域
    const foodListElement = document.getElementById("food-list");
    if (foodListElement) {
      foodListElement.innerHTML = "";
    }

    // 重新渲染食物列表（使用懶加載）
    renderFoodList();

    // 處理搜尋結果為空的情況
    if (foods.length === 0 && searchTerm !== "") {
      console.log(`沒有找到與「${searchTerm}」相關的食物`);
      if (foodListElement) {
        const noResults = document.createElement("div");
        noResults.className = "food-grid__empty";
        noResults.textContent = `沒有找到與「${searchTerm}」相關的食物`;
        foodListElement.appendChild(noResults);
      }
    }
  }

  function debounce(func, delay) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), delay);
    };
  }

  function collectTags() {
    // 處理單一標籤字串
    foods.forEach((food) => {
      if (food.tags) {
        // 確保 tags 存在
        allOriginalTags.add(food.tags);
        allTags.add(food.tags);
      }
    });
  }

  function populateTagSelect() {
    const tagOptions = document.getElementById("tag-dropdown-options");
    if (!tagOptions) return;

    // 保存當前選中的標籤
    const currentSelectedTag = state.currentTag;

    // 清除現有選項，優化「所有食物」選項的處理
    tagOptions.innerHTML = `
        <div class="custom-dropdown__option ${currentSelectedTag === "" ? "selected" : ""}" data-value="">
          所有食物
        </div>
      `;

    // 「所有食物」選項的特殊處理
    const allTagOption = tagOptions.querySelector('.custom-dropdown__option[data-value=""]');
    allTagOption.addEventListener("click", (e) => {
      e.stopPropagation();

      // 更新選中項目的文本
      const selected = document.getElementById("tag-dropdown-selected");
      if (selected) {
        selected.textContent = "所有食物";
      }

      // 更新選中狀態
      tagOptions.querySelectorAll(".custom-dropdown__option").forEach((opt) => {
        opt.classList.toggle("selected", opt.dataset.value === "");
      });

      // 關閉下拉選單
      tagOptions.classList.remove("show");
      tagOptions.closest(".custom-dropdown").classList.remove("active");

      // 使用 null 作為標籤值，請求所有書籍
      console.log("選擇「所有食物」，清空標籤過濾條件");
      filterFoodsByTagValue("");
    });

    // 使用所有原始標籤 (allOriginalTags) 替代當前標籤 (allTags)
    Array.from(allOriginalTags)
      .sort()
      .forEach((tag) => {
        const option = document.createElement("div");
        option.className = `custom-dropdown__option ${tag === currentSelectedTag ? "selected" : ""}`;
        option.dataset.value = tag;
        option.textContent = tag;

        // 添加點擊事件處理器
        option.addEventListener("click", (e) => {
          e.stopPropagation();
          const tagValue = option.dataset.value;

          // 更新選中項目的文本和狀態
          const selected = document.getElementById("tag-dropdown-selected");
          if (selected) {
            selected.textContent = tagValue || "所有食物";
          }

          // 更新選中狀態
          tagOptions.querySelectorAll(".custom-dropdown__option").forEach((opt) => {
            opt.classList.toggle("selected", opt.dataset.value === tagValue);
          });

          // 關閉下拉選單
          tagOptions.classList.remove("show");
          tagOptions.closest(".custom-dropdown").classList.remove("active");

          // 過濾書籍
          filterFoodsByTagValue(tagValue);
        });

        tagOptions.appendChild(option);
      });
  }

  function renderFoodList() {
    const foodListElement = document.getElementById("food-list");
    if (!foodListElement) return;

    const loadingElement = document.getElementById("loading");
    if (loadingElement) loadingElement.remove();

    foodListElement.innerHTML = "";

    if (foods.length === 0) {
      const noFoods = document.createElement("p");
      noFoods.textContent = "沒有找到符合條件的美食";
      noFoods.className = "food-grid__empty";
      foodListElement.appendChild(noFoods);
      return;
    }

    // foods.forEach((food) => {
    //   const foodCard = createFoodCard(food);
    //   foodListElement.appendChild(foodCard);
    // });

    // 初始化顯示的美食 - 只取前 12 項
    state.displayedFoods = foods.slice(0, state.lazyLoadItems);

    // 只渲染初始可見的美食（移除原本渲染所有美食的代碼）
    state.displayedFoods.forEach((food) => {
      const foodCard = createFoodCard(food);
      foodListElement.appendChild(foodCard);
    });

    // 如果有更多美食可以加載，則添加「載入更多」指示器
    if (foods.length > state.displayedFoods.length) {
      addLoadMoreIndicator(foodListElement);
    }

    // 設置交叉觀察器來實現懶加載
    setupLazyLoadObserver();

    console.log(`初始顯示 ${state.displayedFoods.length} 項美食，總共有 ${foods.length} 項美食`);
  }

  // 添加「載入更多」指示器
  function addLoadMoreIndicator(container) {
    const loadMoreIndicator = document.createElement("div");
    loadMoreIndicator.id = "load-more-indicator";
    loadMoreIndicator.className = "load-more-indicator";
    loadMoreIndicator.innerHTML = `
    <div class="load-more-spinner">
      <div class="spinner"></div>
    </div>
    <div class="load-more-text">滾動以載入更多...</div>
  `;
    container.appendChild(loadMoreIndicator);
  }

  // 設置懶加載觀察器
  function setupLazyLoadObserver() {
    // 如果已經加載了所有美食，則不需要設置觀察器
    if (state.displayedFoods.length >= foods.length) {
      return;
    }

    const loadMoreIndicator = document.getElementById("load-more-indicator");
    if (!loadMoreIndicator) return;

    // 創建交叉觀察器
    const observer = new IntersectionObserver(
      (entries) => {
        // 當指示器進入視窗
        if (entries[0].isIntersecting && !state.isLoading) {
          loadMoreFoods();
        }
      },
      {
        root: null, // 使用視窗作為容器
        rootMargin: "0px",
        threshold: 0.1, // 當指示器有10%進入視窗時觸發
      }
    );

    // 觀察指示器元素
    observer.observe(loadMoreIndicator);
  }

  // 加載更多美食
  function loadMoreFoods() {
    // 如果正在加載或已經加載完畢，則返回
    if (state.isLoading || state.displayedFoods.length >= foods.length) {
      return;
    }

    state.isLoading = true;
    console.log(`開始加載更多美食，目前已顯示: ${state.displayedFoods.length}/${foods.length}`);

    // 計算新增美食的開始和結束索引
    const startIndex = state.displayedFoods.length;
    const endIndex = Math.min(startIndex + state.lazyLoadIncrement, foods.length);

    // 獲取新的一批美食
    const newFoods = foods.slice(startIndex, endIndex);
    console.log(`準備加載 ${newFoods.length} 項新美食 (索引 ${startIndex} 到 ${endIndex - 1})`);

    // 添加到已顯示的美食中
    state.displayedFoods = [...state.displayedFoods, ...newFoods];

    // 延遲一小段時間來模擬網絡加載
    setTimeout(() => {
      const foodListElement = document.getElementById("food-list");
      const loadMoreIndicator = document.getElementById("load-more-indicator");

      if (foodListElement && loadMoreIndicator) {
        // 在指示器前添加新美食
        newFoods.forEach((food) => {
          const foodCard = createFoodCard(food);
          foodListElement.insertBefore(foodCard, loadMoreIndicator);
        });

        console.log(
          `成功加載 ${newFoods.length} 項新美食，現在總共顯示 ${state.displayedFoods.length} 項美食`
        );

        // 如果已經加載完所有美食，則移除指示器
        if (state.displayedFoods.length >= foods.length) {
          loadMoreIndicator.remove();
          console.log("所有美食已加載完成，移除加載指示器");
        }
      }

      state.isLoading = false;

      // 重新設置懶加載觀察器
      setupLazyLoadObserver();
    }, 500);
  }

  function createFoodCard(food) {
    const foodCard = document.createElement("div");
    foodCard.className = "food-card";
    foodCard.dataset.id = food.id;

    // 使用安全的 HTML 創建方法
    const safeTitle = DOMPurify.sanitize(food.title);
    const safeLink = DOMPurify.sanitize(food.link);
    const safeImage = DOMPurify.sanitize(food.image);
    const safeTags = DOMPurify.sanitize(food.tags || ""); // 處理單一標籤

    const cardHTML = `
    <div class="food-card__image">
      <a   class="food-card__link">
        <img src="${safeImage}" alt="${safeTitle}" loading="lazy">
      </a>
    </div>
    <div class="food-card__content">
      <a   class="food-card__link">
        <h3 class="food-card__title">${safeTitle}</h3>
      </a>
      <div class="food-card__tags">
        <span class="food-tag" data-tag="${safeTags}">#${safeTags}</span>
      </div>
      <div class="food-card__votes">
        <span class="food-card__votes-block"><span class="food-card__votes-count">${food.votes}</span> 票</span>
        <button class="food-card__vote-btn" data-id="${food.id}">
          ${currentUser.isLoggedIn ? "我要投票 »" : "登入投票 »"}
        </button>
      </div>
    </div>
  `;

    foodCard.innerHTML = DOMPurify.sanitize(cardHTML);

    const voteBtn = foodCard.querySelector(".food-card__vote-btn");
    voteBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      voteForFood(food.id);
    });

    const tagElements = foodCard.querySelectorAll(".food-tag");
    tagElements.forEach((tagElement) => {
      tagElement.addEventListener("click", (e) => {
        e.stopPropagation();
        const tagValue = e.target.dataset.tag;
        filterByTagValue(tagValue);
      });
    });

    // 禁用投票按鈕如果投票已截止
    if (isVotingEnded()) {
      voteBtn.disabled = true;
      voteBtn.textContent = "投票已截止";
    }

    return foodCard;
  }

  async function voteForFood(foodId) {
    try {
      // 確保 votedFoods 是 Set 物件------
      ensureUserVotedFoods();
      if (!currentUser.isLoggedIn) {
        showLoginModal(foodId);
        return;
      }
      try {
        // 先檢查用戶今天的投票情況（批量檢查）
        const userVoteStatus = await apiClient.batchCheckVoteStatus(currentUser.id);

        if (
          userVoteStatus.data &&
          userVoteStatus.data.daily_votes_used >= userVoteStatus.data.max_daily_votes
        ) {
          console.log(
            `用戶今日已達到投票上限: ${userVoteStatus.data.daily_votes_used}/${userVoteStatus.data.max_daily_votes}`
          );
          SwalHelper.showVoteMessage("already_voted", false, userVoteStatus.data.discount_pin_data);
          return;
        }

        // 再特別檢查是否對當前書籍投過票
        const checkResult = await apiClient.checkVoteStatus(foodId, currentUser.id);

        if (checkResult.data && checkResult.data.hasVotedForFoodToday) {
          console.log(`伺服器確認用戶已經為此食物投過票，食物 ID: ${foodId}`);
          SwalHelper.showVoteMessage("already_voted", false, checkResult.data.discount_pin_data);
          return;
        }
      } catch (error) {
        console.log("檢查投票狀態失敗:", error);
      }

      // 顯示 Cloudflare Turnstile 驗證
      console.log("顯示 Cloudflare Turnstile 驗證");
      SwalHelper.showCaptchaModal(async (confirmedFoodId, cfToken) => {
        // 驗證成功後的回調處理
        console.log("Cloudflare Turnstile 驗證成功，令牌:", cfToken);

        // 顯示處理中的狀態
        const votingAlert = SwalHelper.showLoading("投票處理中...", "請稍候");

        try {
          // 嘗試獲取會員折扣碼資訊
          let discountPinData = null;
          try {
            // 批量檢查投票狀態同時獲取會員資訊
            const userStatus = await apiClient.batchCheckVoteStatus(currentUser.id);
            // 檢查是否包含會員折扣碼資訊
            if (userStatus.success && userStatus.data && userStatus.data.discount_pin_data) {
              discountPinData = userStatus.data.discount_pin_data;
              console.log("已獲取用戶折扣碼資訊:", discountPinData);
            }
          } catch (infoError) {
            console.log("獲取會員資訊失敗:", infoError);
          }

          // 發送投票請求，包含驗證令牌
          const response = await fetch(VOTES_API_URL, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "X-User-ID": currentUser.id,
            },
            body: JSON.stringify({
              action: "vote",
              vote_id: foodId.toString(),
              option: "default",
              user_id: currentUser.id,
              cf_token: cfToken, // 添加 Cloudflare Turnstile 驗證令牌
            }),
          });

          if (!response.ok) {
            throw new Error(`HTTP 錯誤: ${response.status}`);
          }

          const responseData = await response.json();
          console.log(`投票請求響應:`, responseData);

          // 關閉處理中提示
          votingAlert.close();

          if (responseData.success && responseData.data && responseData.data.votes !== undefined) {
            const foodIndex = foods.findIndex((food) => food.id === foodId);
            if (foodIndex !== -1) {
              foods[foodIndex].votes = responseData.data.votes;
              console.log(
                `食物 ${foods[foodIndex].title} 的投票數更新為: ${responseData.data.votes}`
              );

              const listVotesCount = safeGetElement(
                `.food-card[data-id="${foodId}"] .food-card__votes-count`
              );
              if (listVotesCount) {
                listVotesCount.textContent = responseData.data.votes;
              }

              currentUser.votedFoods.add(foodId.toString());
              console.log(
                `用戶投票記錄已更新，當前已投票食物: ${Array.from(currentUser.votedFoods).join(
                  ", "
                )}`
              );

              // 使用從回應中獲取的折扣碼資料（若存在）
              discountPinData = responseData.data.discount_pin_data || discountPinData;
              if (discountPinData) {
                console.log("用戶獲得折扣碼:", discountPinData);
              }

              // 同步更新 topthree 組件
              updateTopThreeDisplay();

              SwalHelper.showVoteMessage("投票成功！感謝您的參與", true, discountPinData);

              setTimeout(() => {
                validateVotedFoods();
              }, 1000);
            }
          } else {
            throw new Error(responseData.message || "投票處理失敗");
          }
        } catch (error) {
          // 關閉處理中提示
          votingAlert.close();
          // 處理已投票或投票上限等特殊情況
          if (
            error.message &&
            (error.message.includes("您今天已經為這本書投過票了") ||
              error.message.includes("您今天的投票次數已達上限"))
          ) {
            handleVoteLimitError(error, foodId);
          } else {
            SwalHelper.showVoteMessage(error.message || "投票失敗，請稍後再試", false);
          }
        }
      }, foodId);
    } catch (error) {
      console.error("投票操作失敗:", error);
      if (error.message === "請先登入會員") {
        showLoginModal(foodId);
      } else {
        SwalHelper.showVoteMessage(error.message || "投票失敗，請稍後再試", false);
      }
    }
  }

  /**
   * 處理投票達上限或已投過票的錯誤
   */
  async function handleVoteLimitError(error, foodId) {
    console.log("處理投票限制或已投票錯誤:", error.message);

    // 確保 votedFoods 是 Set 物件------
    ensureUserVotedFoods();

    // 嘗試獲取會員折扣碼資訊
    let discountPinData = null;
    try {
      // 批量檢查投票狀態同時獲取會員資訊
      const userStatus = await apiClient.batchCheckVoteStatus(currentUser.id);
      if (userStatus.success && userStatus.data) {
        // 如果回應中有會員折扣碼資訊
        if (userStatus.data.discount_pin_data) {
          discountPinData = userStatus.data.discount_pin_data;
        }
        console.log("獲取用戶折扣碼資訊:", discountPinData);
      }
    } catch (infoError) {
      console.log("獲取會員資訊失敗:", infoError);
    }

    // 顯示 already_voted 燈箱，並傳入折扣碼資料
    SwalHelper.showVoteMessage("already_voted", false, discountPinData);

    // 更新用戶已投票食物集合
    currentUser.votedFoods.add(foodId.toString());

    // 重新驗證投票記錄
    setTimeout(() => {
      validateVotedFoods();
    }, 1000);
  }

  function safeGetElement(selector) {
    const element = document.querySelector(selector);
    if (!element) {
      console.warn(`Element "${selector}" not found`);
    }
    return element;
  }

  function showError(message) {
    SwalHelper.showError(message);

    const loadingElement = document.getElementById("loading");
    if (loadingElement) loadingElement.style.display = "none";

    const foodListElement = document.getElementById("food-list");
    if (foodListElement) {
      foodListElement.innerHTML = `<div class="error-message">載入失敗：${message || "請檢查網路連接並重試"}</div>`;
    }
  }

  // 確保 currentUser.votedFoods 始終是 Set 物件------
  function ensureUserVotedFoods() {
    if (!currentUser) {
      currentUser = { isLoggedIn: false, id: null, votedFoods: new Set() };
    }
    if (!currentUser.votedFoods || !(currentUser.votedFoods instanceof Set)) {
      currentUser.votedFoods = new Set();
    }
  }

  async function validateVotedFoods() {
    try {
      console.log("開始驗證投票記錄...");
      // 確保 votedFoods 是 Set 物件------
      ensureUserVotedFoods();

      if (!currentUser.isLoggedIn || !currentUser.id) {
        console.log("用戶未登入，清除投票記錄");
        currentUser.votedFoods.clear();
        updateVoteButtonsState();
        return;
      }

      const result = await apiClient.batchCheckVoteStatus(currentUser.id);

      if (result && result.success && result.data) {
        currentUser.votedFoods.clear();

        if (result.data.today_voted_foods && Array.isArray(result.data.today_voted_foods)) {
          result.data.today_voted_foods.forEach((foodId) => {
            currentUser.votedFoods.add(foodId.toString());
          });
        }

        console.log("從伺服器獲取的投票記錄已更新:", Array.from(currentUser.votedFoods));

        updateVoteButtonsState();

        console.log("投票統計信息:", {
          今日已投票數: result.data.daily_votes_used,
          今日剩餘投票數: result.data.daily_votes_remaining,
          每日投票上限: result.data.max_daily_votes,
        });
      }
    } catch (error) {
      console.error("驗證投票記錄時出錯:", error);
    }
  }

  function updateVoteButtonsState() {
    // 確保 votedFoods 是 Set 物件-------
    ensureUserVotedFoods();

    const foodCards = document.querySelectorAll(".food-card");

    foodCards.forEach((card) => {
      const foodId = card.dataset.id;
      const voteBtn = card.querySelector(".food-card__vote-btn");

      if (voteBtn) {
        if (isVotingEnded()) {
          voteBtn.disabled = true;
          voteBtn.textContent = "投票已截止";
        } else if (!currentUser.isLoggedIn) {
          voteBtn.disabled = false;
          voteBtn.textContent = "登入投票 »";
        } else if (currentUser.votedFoods.has(foodId)) {
          voteBtn.disabled = false;
          voteBtn.textContent = "我要投票 »";
        } else {
          voteBtn.disabled = false;
          voteBtn.textContent = "我要投票 »";
        }
      }
    });
  }

  document.addEventListener("visibilitychange", function () {
    if (document.visibilityState === "visible") {
      window.memberAuth.checkLoginStatus().then(() => {
        currentUser = window.memberAuth.getUser();
        // 確保 votedFoods 是 Set 物件------
        ensureUserVotedFoods();
        updateVoteButtonsState();
        validateVotedFoods();
      });
    }
  });

  function filterByTagValue(tagValue) {
    // 在自定義下拉選單中找到對應的標籤選項並模擬點擊
    const tagOptions = document.querySelectorAll("#tag-dropdown-options .custom-dropdown__option");

    for (const option of tagOptions) {
      if (option.dataset.value === tagValue) {
        // 更新選中項目的文本
        const selected = document.getElementById("tag-dropdown-selected");
        if (selected) selected.textContent = option.textContent;

        // 更新選中狀態
        tagOptions.forEach((opt) => opt.classList.remove("selected"));
        option.classList.add("selected");

        // 過濾書籍
        filterFoodsByTagValue(tagValue);

        // 滾動到food-header位置
        const foodHeader = document.getElementById("food-header");
        if (foodHeader) {
          setTimeout(() => {
            foodHeader.scrollIntoView({ behavior: "smooth", block: "start" });
          }, 100);
        }

        break;
      }
    }
  }

  // 新增 updateDropdownsState 函數
  function updateDropdownsState() {
    // 更新標籤下拉選單狀態
    const tagSelected = document.getElementById("tag-dropdown-selected");
    const tagOptions = document.querySelectorAll("#tag-dropdown-options .custom-dropdown__option");

    if (tagSelected) {
      // 若有標籤則顯示標籤名稱，否則顯示「所有食物」
      const displayText = state.currentTag || "所有食物";
      if (tagSelected.textContent !== displayText) {
        tagSelected.textContent = displayText;
      }
    }

    // 更新標籤選項的選中狀態
    tagOptions.forEach((option) => {
      const isSelected = option.dataset.value === state.currentTag;
      option.classList.toggle("selected", isSelected);
    });

    // 更新排序下拉選單狀態
    const sortSelected = document.getElementById("sort-dropdown-selected");
    const sortOptions = document.querySelectorAll(
      "#sort-dropdown-options .custom-dropdown__option"
    );

    if (sortSelected) {
      // 根據當前排序狀態設置顯示文字
      let sortText;
      if (state.currentSort === "random") {
        sortText = "隨機排列";
      } else if (state.currentSort === "votes") {
        sortText = state.currentOrder === "desc" ? "票數高到低" : "票數低到高";
      }

      if (sortSelected.textContent !== sortText) {
        sortSelected.textContent = sortText;
      }
    }

    // 更新排序選項的選中狀態
    let currentSortValue;
    if (state.currentSort === "random") {
      currentSortValue = "random";
    } else {
      currentSortValue = `${state.currentSort}-${state.currentOrder}`;
    }

    sortOptions.forEach((option) => {
      const isSelected = option.dataset.value === currentSortValue;
      option.classList.toggle("selected", isSelected);
    });

    // 記錄當前狀態到控制台
    console.log("UI 狀態已更新:", {
      tag: state.currentTag || "(所有食物)",
      sort: state.currentSort,
      order: state.currentOrder,
    });
  }

  // 新增 updateTopThreeDisplay 函數
  function updateTopThreeDisplay() {
    const topThreeEvent = new CustomEvent("updateTopThree");
    window.dispatchEvent(topThreeEvent);
    console.log("已觸發更新前三名排行的事件");
  }
</script>

<style lang="scss" is:global>
  .food-header {
    text-align: center;
    width: 100%;
    max-width: 1190px;
    margin: 0 auto;
    padding-top: 90px;
    padding-bottom: 120px;
    @media (max-width: 450px) {
      width: 100%;
    }
    .food-list {
      width: 100%;
      max-width: 350px;
      margin: 0 auto;
      display: block;
      @media (max-width: 450px) {
        max-width: 156px;
      }
    }
    &__image {
      width: 100%;
      max-width: 262px;
      margin: 0 auto;
      display: block;
    }
  }

  .food-filter {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin: 0 auto;
    width: 100%;
    max-width: 1190px;
    @media (max-width: 768px) {
      width: 86%;
    }
    @media (max-width: 450px) {
      width: 100%;
    }

    &__left {
      flex: 1;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      @media (max-width: 450px) {
        flex-direction: column;
        gap: 10px;
      }
    }

    &__center {
      flex: 2;
      text-align: center;
    }

    &__right {
      flex: 1;
      display: flex;
      justify-content: flex-end;
      gap: 20px;
      @media (max-width: 450px) {
        gap: 10px;
      }
    }

    &__search {
      display: flex;
      align-items: center;
      width: 100%;
      max-width: 280px;
      height: 42px;
      padding: 12px 12px 8px 42px;
      // 修改內邊距，左側容納圖示
      border: 1px solid #ddd;
      background-color: rgba(255, 255, 255, 1);
      border-radius: 24px;
      box-shadow: inset 2px 2px 0px 2px rgba(0, 0, 0, 1);
      &:focus {
        outline: none;
      }
      &::placeholder {
        color: #999;
        line-height: 42px;
        vertical-align: middle;
      }
      @media (max-width: 450px) {
        max-width: 320px;
        width: 100%;
      }
      @media (max-width: 320px) {
        max-width: 300px;
      }
    }

    &__tag,
    &__sort {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    &__label {
      font-size: 14px;
      color: #ffffff;
    }
  }

  .search-container {
    position: relative;
    width: 100%;
    max-width: 280px;

    @media (max-width: 450px) {
      max-width: 320px;
    }
    @media (max-width: 320px) {
      max-width: 300px;
    }

    .search-icon {
      position: absolute;
      left: 16px;
      top: 56%;
      transform: translateY(-50%);
      pointer-events: none;
    }
  }

  /* 自定義下拉選單樣式 */
  .custom-dropdown {
    position: relative;
    min-width: 120px;
    user-select: none;

    &__selected {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px 12px 8px 16px;
      border: 1px solid #000;
      border-radius: 10px;
      color: #000000;
      cursor: pointer;
      transition: background-color 0.2s ease;

      &:after {
        content: "";
        border-style: solid;
        border-width: 5px 5px 0 5px;
        border-radius: 50px;
        border-color: #000 transparent transparent transparent;
        transition: transform 0.2s ease;
      }
    }

    &.active &__selected:after {
      transform: rotate(180deg);
    }

    &__options {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      background-color: #ffffff;
      border: 1px solid #ddd;
      border-radius: 10px;
      max-height: 0;
      overflow: hidden;
      z-index: 100;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;

      &.show {
        width: 100%;
        max-height: 250vh; /* 限制最大高度 */
        opacity: 1;
        visibility: visible;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

        .custom-dropdown__options-container {
          padding: 8px 0;
        }
      }
    }

    &__options-container {
      padding: 0;
      transition: padding 0.3s ease;
    }

    &__option {
      width: 100%;
      padding: 8px 16px;
      color: #000;
      cursor: pointer;
      transition: background-color 0.2s ease;

      &:hover {
        background-color: #f5f5f5;
        border-radius: 10px;
      }

      &.selected {
        background-color: #f0f0f0;
        border-radius: 10px;
        font-weight: bold;
      }
    }
  }

  /* 新增下拉選單包裝器樣式 */
  .dropdown-wrapper {
    width: 150px;

    .custom-dropdown {
      width: 100%;

      &__selected {
        width: 100%;
        min-width: 150px;
      }

      &__options {
        width: 150px;
      }

      &__option {
        width: 100%;
        text-align: left;
        padding: 10px 28px;
        position: relative; // 添加相對定位
        border-bottom: none; // 移除原先的邊框

        // 添加較短的底部邊框
        &::after {
          content: "";
          position: absolute;
          bottom: 0;
          left: 28px; // 左側間距，與 padding-left 一致
          right: 28px; // 右側間距，與 padding-right 一致
          height: 1px;
          background-color: #d5d5d5;
        }
        &:last-child {
          border-bottom: none;
        }
      }
    }
  }

  .food-main {
    width: 100%;
    max-width: 1190px;
    margin: 0 auto;
  }

  .food-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 40px 20px;
    margin: 0 auto; /* 新增此行使網格置中 */
    padding-top: 80px;
    justify-items: center;

    &__loading {
      text-align: center;
      padding: 20px;
      color: #000;
      font-size: 18px;
      grid-column: 1 / -1;
    }

    &__empty {
      text-align: center;
      padding: 30px;
      color: #000;
      font-size: 18px;
      grid-column: 1 / -1;
    }
  }

  .food-card {
    position: relative;
    overflow: visible;
    border-radius: 20px;
    display: block;
    background: #f2ede5;
    box-shadow: 4px 4px 0px 3px rgba(0, 0, 0, 1);
    height: 322px;
    width: 100%;
    max-width: 280px;
    margin-top: 80px;
    &__image {
      position: absolute;
      top: -120px;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      text-align: center;
      padding: 15px 0;

      img {
        width: 80%;
        max-width: 200px;
        border-radius: 50%;
        aspect-ratio: 1 / 1;
        object-fit: cover;
        display: inline-block;
        border: 3px solid #ffffff;
        box-shadow: 3px 7px 0px 2px rgba(0, 0, 0, 0.16);
      }
    }
    &__content {
      display: flex;
      flex-direction: column;
      max-width: 210px;
      margin: 0 auto; /* 使內容區域置中 */
      padding-top: 120px;
    }

    /* RWD 小於 450px 時的橫向排列 */
    @media (max-width: 450px) {
      height: auto;
      max-width: 100%;
      display: flex;
      flex-direction: row;
      align-items: stretch;
      padding: 10px;
      border-radius: 10px;

      &__image {
        width: 40%;
        display: flex;
        align-items: center;

        img {
          width: 100%;
          height: 190px;
          max-width: 140px;
          border-radius: 10px;
        }
      }

      &__content {
        width: 60%;
        padding: 5px 10px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        @media (max-width: 450px) {
          padding: 10px;
        }
      }
    }

    &__link {
      text-decoration: none;
      color: inherit;
      display: block;
    }

    &__title {
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 4px;
      color: #000;
      display: block;
      text-align: center;
      @media (max-width: 450px) {
        min-height: 40px; /* 調整小於 450px 時的最小高度 */
        text-align: left;
      }
    }

    &__tags {
      display: flex;
      justify-content: center;
      font-weight: 600;
      cursor: pointer;
    }

    &__votes {
      width: 100%;
      display: flex;
      flex-direction: column;
      margin-top: 5%;
      font-size: 16px;
      color: #000;
      text-align: center;
      &__text {
        margin-right: 10px;
        font-size: 16px;
        color: #000000;
      }
    }

    &__votes-block {
      display: block;
      text-align: center;
      width: 100%;
      margin-bottom: 10px;
    }

    &__votes-count {
      font-weight: bold;
      color: #000000;
      font-size: 18px;
      letter-spacing: 1px;
      line-height: 24px;
    }
    &__vote-btn {
      background-color: #000;
      color: #ebe549;
      border: none;
      border-radius: 24px;
      font-size: 16px;
      cursor: pointer;
      padding: 10px 20px;
      box-shadow: 3px 7px 0px 2px rgba(0, 0, 0, 0.16);
      @media (max-width: 450px) {
        width: 100%;
        max-width: 175px;
      }
    }
  }

  .food-tag {
    padding: 4px 8px;
    font-size: 16px;
    color: #000000;
    text-decoration: underline;
    transition: background-color 0.2s ease;
    @media (max-width: 450px) {
      padding: 0;
    }
  }

  .food-footer {
    text-align: center;
    margin-top: 40px;
    color: #ffffff;
    padding-bottom: 20px;
  }

  .error-message {
    text-align: center;
    padding: 20px;
    color: #ef4444;
    background-color: #fee2e2;
    border-radius: 6px;
    margin: 20px 0;
  }

  /* 懶加載指示器樣式 */
  .load-more-indicator {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
    width: 100%;
    margin: 20px 0;
  }

  .load-more-spinner {
    display: flex;
    justify-content: center;
    margin-bottom: 10px;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #f37562;
    animation: spin 1s linear infinite;
  }

  .load-more-text {
    color: #ffffff;
    font-size: 16px;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>
